# test/test_schema.py

import pytest

from inspect import isclass as _isclass
from eav import schema, Base
from eav.models import AttributeMixin
from sqlalchemy import create_engine
from sqlalchemy import Integer, String, Float, Date
from sqlalchemy.orm import Session
from datetime import date


class TestSchema:
    """Test schema generated by factory function 'schema'
    from module eav without persistence of a database
    engine.

    TEST: 0-xxx
    """

    @classmethod
    def setup_class(class_):
        class_.Schema = schema(
            "Schema",
            attr_str=String(),
            attr_int=Integer(),
            attr_float=Float(),
            )

    def test_number_0_0(self):
        """TEST Define an E-A-V shema with class data types as parameters
        """
        S = schema(
            "Sample",
            attr_str=String,
            attr_int=Integer,
            attr_float=Float,
            )
        assert _isclass(S)
        assert S.__qualname__ == 'Sample'

    def test_number_0_1(self):
        """TEST: Define an E-A-V schema
        """
        assert _isclass(self.Schema)
        assert self.Schema.__qualname__ == 'Schema'

    def test_number_0_2(self):
        """TEST: Schema must be a subclass of eav.model.Entity
        and must be an sqlalchemy declarative_base instance
        """
        from eav.models import Entity
        assert issubclass(self.Schema, Entity)
        assert issubclass(self.Schema, Base)

    def test_number_0_3(self):
        """TEST: Check existence of defined attribute in schema/class
        dictionary
        """
        assert 'attr_str' in dir(self.Schema)
        assert 'attr_int' in dir(self.Schema)
        assert 'attr_float' in dir(self.Schema)

    def test_number_0_4(self):
        """TEST: Defined attributes access from schema/class level
        returns the table class for value type
        """
        assert issubclass(getattr(self.Schema, 'attr_str'), AttributeMixin)
        assert issubclass(getattr(self.Schema, 'attr_int'), AttributeMixin)
        assert issubclass(getattr(self.Schema, 'attr_float'), AttributeMixin)

    @pytest.mark.skip(reason="due to my limitation of knowledge about the language.")
    def test_number_0_5(self):
        """TEST: Setting a defined attribute from schema/class level
        must raise an AttributeError exception.
        """
        with pytest.raises(AttributeError):
            setattr(self.Schema, 'attr_str', None)
            setattr(self.Schema, 'attr_int', None)
            setattr(self.Schema, 'attr_float', None)


class TestSchemaInstance:
    """Test the instances created by instantiating a class/schema generated by
    factory function 'schema' from module eav.

    TEST: 1-xxx
    """

    @classmethod
    def setup_class(class_):
        class_.Person = schema(
            "Person",
            name=String(16),
            birthdate=Date(),
            age=Integer(),
            weight=Float(),
            )
        engine = create_engine('sqlite://')
        Base.metadata.create_all(engine)
        class_.session = Session(engine)

    @classmethod
    def teardown_class(class_):
        class_.session.close_all()

    def test_number_1_0(self):
        """TEST: Create an instance of the generated schema"""

        me = self.Person()
        assert isinstance(me, self.Person)

    def test_number_1_1(self):
        """TEST: Instantiate with wrong parameter data type
        raise ValueError.
        """
        parameters = (
            (date(1989, 6, 28), date(1989, 6 , 28), 28, 89.6),
            ('Dok', 'June 28, 1989', 28, 89.1),
            ('Dok', date(1989, 6, 28), '28', 89.6),
            ('Dok', date(1989, 6, 28), 28, 89),
            )
        for name, bday, age, wt in parameters:
            with pytest.raises(ValueError):
                self.Person(
                    name=name,
                    birthdate=bday,
                    age=age,
                    weight=wt,
                    )

    def test_number_1_2(self):
        """TEST: Update instance attribute to a value with different data type
        raise ValueError
        """
        parameters = (
            (date(1989, 6, 28), date(1989, 6 , 28), 28, 89.6),
            ('Dok', 'June 28, 1989', 28, 89.1),
            ('Dok', date(1989, 6, 28), '28', 89.6),
            ('Dok', date(1989, 6, 28), 28, 89),
            )
        person = self.Person(
                    name='my name',
                    birthdate=date(1989, 6, 28),
                    age=28,
                    weight=45.6,
                    )
        for name, bday, age, wt in parameters:
            with pytest.raises(ValueError):
                person.name = name
                person.birthdate = bday
                person.age = age
                person.weight = wt

    def test_number_1_3(self):
        """TEST: Deleting a defined instance attribute should set its value to
        None instead of raising AttributeError.
        """
        person = self.Person(name='My Name')
        assert person.name == 'My Name'
        del(person.name)
        assert person.name is None and hasattr(person, 'name')

    def test_number_1_4(self):
        """TEST:
        """
        assert False
